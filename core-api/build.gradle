plugins {
	id "java-library"
}


description = """ABSmartly Java SDK"""


def httpClientVersion = "5.1.3"

jar {
	from {
		configurations.runtimeClasspath.collect {
			it.getName().contains("simpleCircuitBreaker") ? zipTree(it) : null
		}
	}
}

dependencies {
	implementation group: "org.slf4j", name: "slf4j-api", version: slf4jVersion

	implementation group: "org.apache.httpcomponents.client5", name: "httpclient5", version: httpClientVersion
	implementation group: "org.apache.httpcomponents.client5", name: "httpclient5-fluent", version: httpClientVersion

	api group: "net.sourceforge.streamsupport", name: "streamsupport-minifuture", version: "1.7.4"

	implementation group: "com.google.code.findbugs", name: "jsr305", version: "3.0.2"
	implementation group: "com.google.code.findbugs", name: "findbugs-annotations", version: "3.0.1"

	implementation group: "com.fasterxml.jackson.core", name: "jackson-databind", version: jacksonVersion
	implementation group: "com.fasterxml.jackson.datatype", name: "jackson-datatype-jsr310", version: jacksonDataTypeVersion
	implementation group: 'org.xerial', name: 'sqlite-jdbc', version: sqliteVersion

	implementation files('../libs/simpleCircuitBreaker-2.0.5.jar')

	testImplementation group: "org.junit.jupiter", name: "junit-jupiter-api", version: junitVersion
	testImplementation group: "org.junit.jupiter", name: "junit-jupiter-params", version: junitVersion
	testRuntimeOnly group: "org.junit.jupiter", name: "junit-jupiter-engine", version: junitVersion
	testImplementation group: "org.mockito", name: "mockito-core", version: mockitoVersion
	testImplementation group: "org.mockito", name: "mockito-inline", version: mockitoVersion
	testImplementation group: "org.mockito", name: "mockito-junit-jupiter", version: mockitoVersion
}

check.dependsOn jacocoTestCoverageVerification

jacocoTestReport {
	afterEvaluate {
		getClassDirectories().setFrom(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				"com/absmartly/core-api/json/**/*"
			])
		})
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				counter = "CLASS"
				value = "COVEREDRATIO"
				minimum = 1.0
			}

			limit {
				counter = "METHOD"
				value = "COVEREDRATIO"
				minimum = 0.90
			}

			limit {
				counter = "INSTRUCTION"
				value = "COVEREDRATIO"
				minimum = 0.88
			}
		}
	}

	afterEvaluate {
		getClassDirectories().setFrom(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				"com/absmartly/core-api/json/**/*"
			])
		})
	}
}


test {
	useJUnitPlatform()
}

publishToSonatype.dependsOn check
